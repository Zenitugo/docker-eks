name: Workflow to build and push docker image, create EKS, install ArgoCD, prometheus and grafana with helm

on:
  workflow_dispatch:
      inputs:
      # Working directory input from user.
        resource:
            type: choice
            description: Choose the resource
            options:
            - s3-dynamodb
            - eks-cluster
      # Terraform action you want to perform
        action:
            description: 'Terraform Action to Perform'
            required: true
            default: 'terraform_apply'

jobs:  
  terraform_apply:
    name: "Terraform_apply" 
    if: ${{ github.ref == 'refs/heads/master' && github.event.inputs.action == 'Terraform_apply' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'
        id: Install
        
      - name: Install helm
        uses: azure/setup-helm@v4.1.0
        with:
          version: 'v3.14.0'
        id: helm

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          
      - name: Configure Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Login into docker hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build docker image
        run: docker build . --file Dockerfile --tag zenitugo/healet

      - name: Push docker image  
        run: docker push zenitugo/healet

      - name: Create S3 bucket, dynamodb and cluster
        id: apply
        run: |
          for dir in s3-dynamodb eks-cluster; do
            echo "Processing $dir"
            cd $dir
          #Check if the nested directories exist and apply Terraform commands
            if [ -d "rootmodules" ]; then
              cd rootmodules
              terraform init 
              terraform plan -var-file="terraform.tfvars"
              terraform apply -auto-approve 
              cd ..
            fi
            if [ -d "dev" ]; then
              cd dev
              terraform init
              terraform plan -var-file="terraform.tfvars"
              terraform apply -auto-approve 
              cd ..
            fi
            cd ..
          done  

      - name: Update kube config
        run: aws eks update-kubeconfig --name my-eks-cluster      

      - name: Deploy to EKS
        run: |
          cd configure
          echo "Creating namespace"
          kubectl apply -f namespace.yml
         
      - name: Installing ArgoCD in EKS Cluster
        run: |
          echo "Installing argocd in eks cluster"
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.10.2/manifests/install.yaml

      - name: Installing prometheus
        run: 
          echo "Installing Prometheus"
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install prometheus prometheus-community/prometheus --namespace prometheus --set server.alertManager.persistentVolume.storageClass="gp2" --set server.persistentVolume.storageClass="gp2" --set server.service.type=LoadBalancer   

      - name: Installing grafana
        run: 
          echo "Installing grafana"
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm install my-grafana grafana/grafana --namespace grafana --set persistence.storageClassName="gp2" --set adminPassword='ubuntu' --set server.service.type=LoadBalancer    
  
      - name: Install CRD for cert manager
        run: |
          kubectl apply -n cert-manager -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.crds.yaml 
                  
      - name: Install Cert Manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml 
            
      - name: Install nginx ingress controller
        run:  |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v3.4.3/deploy/static/provider/aws/deploy.yaml
            
      - name: Send notification to slack on the status of my pipeline
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
                "text": "Github Actions Complete, CI pipeline successful: Docker image pushed to docker hub and EKS created successfully"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL}}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        id: Slack                

  terraform_destroy:
    name: "Terraform_destroy"
    if: ${{ github.ref == 'refs/heads/master' && github.event.inputs.action == 'Terraform_destroy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create S3 bucket, dynamodb and cluster
        id: destroy
        run: |
          for dir in eks-cluster s3-dynamodb; do
              echo "Processing $dir"
              cd $dir
            #Check if the nested directories exist and apply Terraform commands
              if [ -d "dev" ]; then
                cd dev
                terraform init 
                terraform destroy -auto-approve 
                cd ..
              fi
              if [ -d "rootmodules" ]; then
                cd rootmodules
                terraform init
                terraform destroy -auto-approve 
                cd ..
              fi
              cd ..
            done  

      - name: Send notification to slack on the status of my pipeline
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
                "text": "Github Actions Complete, CI pipeline successful: EKS infrastructure destroyed successfully"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL}}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        id: Slack    
  